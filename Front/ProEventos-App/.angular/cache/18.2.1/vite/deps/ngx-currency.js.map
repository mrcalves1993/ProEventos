{
  "version": 3,
  "sources": ["../../../../../node_modules/ngx-currency/fesm2022/ngx-currency.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, makeEnvironmentProviders } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nvar NgxCurrencyInputMode;\n(function (NgxCurrencyInputMode) {\n  NgxCurrencyInputMode[NgxCurrencyInputMode[\"Financial\"] = 0] = \"Financial\";\n  NgxCurrencyInputMode[NgxCurrencyInputMode[\"Natural\"] = 1] = \"Natural\";\n})(NgxCurrencyInputMode || (NgxCurrencyInputMode = {}));\nconst NGX_CURRENCY_CONFIG = new InjectionToken('ngx-currency.config');\nclass InputManager {\n  constructor(_htmlInputElement) {\n    this._htmlInputElement = _htmlInputElement;\n    this._storedRawValue = null;\n  }\n  setCursorAt(position) {\n    this._htmlInputElement.focus();\n    this._htmlInputElement.setSelectionRange(position, position);\n  }\n  updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n    this.rawValue = newRawValue;\n    const newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n  get canInputMoreNumbers() {\n    const onlyNumbers = this.rawValue?.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, '') ?? '';\n    const hasReachedMaxLength = !(onlyNumbers.length >= this._htmlInputElement.maxLength && this._htmlInputElement.maxLength >= 0);\n    const selectionStart = this.inputSelection.selectionStart;\n    const selectionEnd = this.inputSelection.selectionEnd;\n    const haveNumberSelected = !!(selectionStart != selectionEnd && this._htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n    const startWithZero = this._htmlInputElement.value.substring(0, 1) == '0';\n    return hasReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n  get inputSelection() {\n    return {\n      selectionStart: this._htmlInputElement.selectionStart ?? 0,\n      selectionEnd: this._htmlInputElement.selectionEnd ?? 0\n    };\n  }\n  get rawValue() {\n    return this._htmlInputElement && this._htmlInputElement.value;\n  }\n  set rawValue(value) {\n    this._storedRawValue = value;\n    if (this._htmlInputElement) {\n      this._htmlInputElement.value = value ?? '';\n    }\n  }\n  get storedRawValue() {\n    return this._storedRawValue || '';\n  }\n}\nclass InputService {\n  constructor(htmlInputElement, _options) {\n    this._options = _options;\n    this._singleDigitRegex = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n    this._onlyNumbersRegex = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n    this._perArNumber = new Map([['\\u06F0', '0'], ['\\u06F1', '1'], ['\\u06F2', '2'], ['\\u06F3', '3'], ['\\u06F4', '4'], ['\\u06F5', '5'], ['\\u06F6', '6'], ['\\u06F7', '7'], ['\\u06F8', '8'], ['\\u06F9', '9'], ['\\u0660', '0'], ['\\u0661', '1'], ['\\u0662', '2'], ['\\u0663', '3'], ['\\u0664', '4'], ['\\u0665', '5'], ['\\u0666', '6'], ['\\u0667', '7'], ['\\u0668', '8'], ['\\u0669', '9']]);\n    this.inputManager = new InputManager(htmlInputElement);\n  }\n  addNumber(keyCode) {\n    const {\n      decimal,\n      precision,\n      inputMode\n    } = this._options;\n    const keyChar = String.fromCharCode(keyCode);\n    const isDecimalChar = keyChar === this._options.decimal;\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, keyChar);\n      let selectionStart = undefined;\n      if (inputMode === NgxCurrencyInputMode.Natural && precision > 0) {\n        selectionStart = this.rawValue.indexOf(decimal);\n        if (isDecimalChar) {\n          selectionStart++;\n        }\n      }\n      this.updateFieldValue(selectionStart);\n    } else {\n      const selectionStart = this.inputSelection.selectionStart;\n      const selectionEnd = this.inputSelection.selectionEnd;\n      const rawValueStart = this.rawValue.substring(0, selectionStart);\n      let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\n      // In natural mode, replace decimals instead of shifting them.\n      const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n      if (inputMode === NgxCurrencyInputMode.Natural && inDecimalPortion && selectionStart === selectionEnd) {\n        rawValueEnd = rawValueEnd.substring(1);\n      }\n      const newValue = rawValueStart + keyChar + rawValueEnd;\n      let nextSelectionStart = selectionStart + 1;\n      const isDecimalOrThousands = isDecimalChar || keyChar === this._options.thousands;\n      if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n        // If the cursor is just before the decimal or thousands separator and the user types the\n        // decimal or thousands separator, move the cursor past it.\n        nextSelectionStart++;\n      } else if (!this._singleDigitRegex.test(keyChar)) {\n        // Ignore other non-numbers.\n        return;\n      }\n      this.rawValue = newValue;\n      this.updateFieldValue(nextSelectionStart);\n    }\n  }\n  applyMask(isNumber, rawValue, disablePadAndTrim = false) {\n    const {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands,\n      min,\n      inputMode\n    } = this._options;\n    let {\n      max\n    } = this._options;\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(this._onlyNumbersRegex, '');\n    if (!onlyNumbers && rawValue !== decimal) {\n      return '';\n    }\n    if (inputMode === NgxCurrencyInputMode.Natural && !isNumber && !disablePadAndTrim) {\n      rawValue = this.padOrTrimPrecision(rawValue);\n      onlyNumbers = rawValue.replace(this._onlyNumbersRegex, '');\n    }\n    let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^\\u0660*/g, '').replace(/^\\u06F0*/g, '').replace(/^0*/g, '');\n    if (integerPart == '') {\n      integerPart = '0';\n    }\n    const integerValue = parseInt(integerPart);\n    integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n    if (thousands && integerPart.startsWith(thousands)) {\n      integerPart = integerPart.substring(1);\n    }\n    let newRawValue = integerPart;\n    const decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n    const decimalValue = parseInt(decimalPart) || 0;\n    const isNegative = rawValue.indexOf('-') > -1;\n    // Ensure max is at least as large as min.\n    max = max === null || max === undefined || min === null || min === undefined ? max : Math.max(max, min);\n    // Ensure precision number works well with more than 2 digits\n    // 23 / 100... 233 / 1000 and so on\n    const divideBy = Number('1'.padEnd(precision + 1, '0'));\n    // Restrict to the min and max values.\n    let newValue = integerValue + decimalValue / divideBy;\n    newValue = isNegative ? -newValue : newValue;\n    if (max !== null && max !== undefined && newValue > max) {\n      return this.applyMask(true, max + '');\n    } else if (min !== null && min !== undefined && newValue < min) {\n      return this.applyMask(true, min + '');\n    }\n    if (precision > 0) {\n      if (newRawValue == '0' && decimalPart.length < precision) {\n        newRawValue += decimal + '0'.repeat(precision - 1) + decimalPart;\n      } else {\n        newRawValue += decimal + decimalPart;\n      }\n    }\n    // let isZero = newValue == 0;\n    const operator = isNegative && allowNegative /*&& !isZero */ ? '-' : '';\n    return operator + prefix + newRawValue + suffix;\n  }\n  padOrTrimPrecision(rawValue) {\n    const {\n      decimal,\n      precision\n    } = this._options;\n    let decimalIndex = rawValue.lastIndexOf(decimal);\n    if (decimalIndex === -1) {\n      decimalIndex = rawValue.length;\n      rawValue += decimal;\n    }\n    let decimalPortion = rawValue.substring(decimalIndex).replace(this._onlyNumbersRegex, '');\n    const actualPrecision = decimalPortion.length;\n    if (actualPrecision < precision) {\n      for (let i = actualPrecision; i < precision; i++) {\n        decimalPortion += '0';\n      }\n    } else if (actualPrecision > precision) {\n      decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n    }\n    return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n  }\n  clearMask(rawValue) {\n    if (this.isNullable() && rawValue === '') return null;\n    let value = (rawValue || '0').replace(this._options.prefix, '').replace(this._options.suffix, '');\n    if (this._options.thousands) {\n      value = value.replace(new RegExp('\\\\' + this._options.thousands, 'g'), '');\n    }\n    if (this._options.decimal) {\n      value = value.replace(this._options.decimal, '.');\n    }\n    this._perArNumber.forEach((val, key) => {\n      const re = new RegExp(key, 'g');\n      value = value.replace(re, val);\n    });\n    return parseFloat(value);\n  }\n  changeToNegative() {\n    if (this._options.allowNegative /*&& this.rawValue != \"\"*/ && this.rawValue?.charAt(0) != '-' /*&& this.value != 0*/) {\n      // Apply the mask to ensure the min and max values are enforced.\n      this.rawValue = this.applyMask(false, '-' + (this.rawValue ? this.rawValue : '0'));\n    }\n  }\n  changeToPositive() {\n    // Apply the mask to ensure the min and max values are enforced.\n    this.rawValue = this.applyMask(false, this.rawValue?.replace('-', '') ?? '');\n  }\n  removeNumber(keyCode) {\n    const {\n      decimal,\n      thousands,\n      prefix,\n      suffix,\n      inputMode\n    } = this._options;\n    if (this.isNullable() && this.value == 0) {\n      this.rawValue = null;\n      return;\n    }\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n    const suffixStart = (this.rawValue?.length ?? 0) - suffix.length;\n    selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n    selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\n    // Check if selection was entirely in the prefix or suffix.\n    if (selectionStart === selectionEnd && this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n      this.updateFieldValue(selectionStart);\n      return;\n    }\n    let decimalIndex = this.rawValue?.indexOf(decimal) ?? -1;\n    if (decimalIndex === -1) {\n      decimalIndex = this.rawValue?.length ?? 0;\n    }\n    let shiftSelection = 0;\n    let insertChars = '';\n    const isCursorInDecimals = decimalIndex < selectionEnd;\n    const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\n    if (selectionEnd === selectionStart) {\n      if (keyCode == 8) {\n        if (selectionStart <= prefix.length) {\n          return;\n        }\n        selectionStart--;\n        // If previous char isn't a number, go back one more.\n        if (!this.rawValue?.substring(selectionStart, selectionStart + 1).match(/\\d/)) {\n          selectionStart--;\n        }\n        // In natural mode, jump backwards when in decimal portion of number.\n        if (inputMode === NgxCurrencyInputMode.Natural && isCursorInDecimals) {\n          shiftSelection = -1;\n          // when removing a single whole number, replace it with 0\n          if (isCursorImmediatelyAfterDecimalPoint && (this.value ?? 0) < 10 && (this.value ?? 0) > -10) {\n            insertChars += '0';\n          }\n        }\n      } else if (keyCode == 46 || keyCode == 63272) {\n        if (selectionStart === suffixStart) {\n          return;\n        }\n        selectionEnd++;\n        // If next char isn't a number, go one more.\n        if (!this.rawValue?.substring(selectionStart, selectionStart + 1).match(/\\d/)) {\n          selectionStart++;\n          selectionEnd++;\n        }\n      }\n    }\n    // In natural mode, replace decimals with 0s.\n    if (inputMode === NgxCurrencyInputMode.Natural && selectionStart > decimalIndex) {\n      const replacedDecimalCount = selectionEnd - selectionStart;\n      for (let i = 0; i < replacedDecimalCount; i++) {\n        insertChars += '0';\n      }\n    }\n    let selectionFromEnd = (this.rawValue?.length ?? 0) - selectionEnd;\n    this.rawValue = this.rawValue?.substring(0, selectionStart) + insertChars + this.rawValue?.substring(selectionEnd);\n    // Remove leading thousand separator from raw value.\n    const startChar = this.rawValue.substring(prefix.length, prefix.length + 1);\n    if (startChar === thousands) {\n      this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n      selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n    }\n    this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n  }\n  updateFieldValue(selectionStart, disablePadAndTrim = false) {\n    const newRawValue = this.applyMask(false, this.rawValue ?? '', disablePadAndTrim);\n    selectionStart ??= this.rawValue?.length ?? 0;\n    selectionStart = Math.max(this._options.prefix.length, Math.min(selectionStart, (this.rawValue?.length ?? 0) - this._options.suffix.length));\n    this.inputManager.updateValueAndCursor(newRawValue, this.rawValue?.length ?? 0, selectionStart);\n  }\n  updateOptions(options) {\n    const value = this.value;\n    this._options = options;\n    this.value = value;\n  }\n  prefixLength() {\n    return this._options.prefix.length;\n  }\n  suffixLength() {\n    return this._options.suffix.length;\n  }\n  isNullable() {\n    return this._options.nullable;\n  }\n  get canInputMoreNumbers() {\n    return this.inputManager.canInputMoreNumbers;\n  }\n  get inputSelection() {\n    return this.inputManager.inputSelection;\n  }\n  get rawValue() {\n    return this.inputManager.rawValue;\n  }\n  set rawValue(value) {\n    this.inputManager.rawValue = value;\n  }\n  get storedRawValue() {\n    return this.inputManager.storedRawValue;\n  }\n  get value() {\n    return this.clearMask(this.rawValue);\n  }\n  set value(value) {\n    this.rawValue = this.applyMask(true, '' + value);\n  }\n  _isNullOrUndefined(value) {\n    return value === null || value === undefined;\n  }\n}\nclass InputHandler {\n  constructor(htmlInputElement, options) {\n    this.inputService = new InputService(htmlInputElement, options);\n  }\n  handleCut() {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n  handleInput() {\n    const rawValue = this.inputService.rawValue ?? '';\n    const selectionStart = this.inputService.inputSelection.selectionStart;\n    const keyCode = rawValue.charCodeAt(selectionStart - 1);\n    const rawValueLength = rawValue.length;\n    const storedRawValueLength = this.inputService.storedRawValue.length;\n    if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n      this.inputService.updateFieldValue(selectionStart);\n      this.onModelChange(this.inputService.value);\n      return;\n    }\n    // Restore the old value.\n    this.inputService.rawValue = this.inputService.storedRawValue;\n    if (rawValueLength < storedRawValueLength) {\n      // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n      // input event, so we need to wrap this in a timeout.\n      this.timer(() => {\n        // Move the cursor to just after the deleted value.\n        this.inputService.updateFieldValue(selectionStart + 1);\n        // Then backspace it.\n        this.inputService.removeNumber(8);\n        this.onModelChange(this.inputService.value);\n      }, 0);\n    }\n    if (rawValueLength > storedRawValueLength) {\n      // Move the cursor to just before the new value.\n      this.inputService.updateFieldValue(selectionStart - 1);\n      // Process the character like a keypress.\n      this._handleKeypressImpl(keyCode);\n    }\n  }\n  handleKeydown(event) {\n    const keyCode = event.which || event.charCode || event.keyCode;\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n      if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() && this.inputService.inputSelection.selectionEnd >= (this.inputService.rawValue?.length ?? 0) - this.inputService.suffixLength()) {\n        this.clearValue();\n      } else {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n  clearValue() {\n    this.setValue(this.inputService.isNullable() ? null : 0);\n    this.onModelChange(this.inputService.value);\n  }\n  handleKeypress(event) {\n    const keyCode = event.which || event.charCode || event.keyCode;\n    event.preventDefault();\n    if (keyCode === 97 && event.ctrlKey) {\n      return;\n    }\n    this._handleKeypressImpl(keyCode);\n  }\n  _handleKeypressImpl(keyCode) {\n    switch (keyCode) {\n      case undefined:\n      case 9:\n      case 13:\n        return;\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n      default:\n        if (this.inputService.canInputMoreNumbers) {\n          const selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n          if (selectionRangeLength == (this.inputService.rawValue?.length ?? 0)) {\n            this.setValue(null);\n          }\n          this.inputService.addNumber(keyCode);\n        }\n        break;\n    }\n    this.onModelChange(this.inputService.value);\n  }\n  handlePaste() {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n  updateOptions(options) {\n    this.inputService.updateOptions(options);\n  }\n  getOnModelChange() {\n    return this.onModelChange;\n  }\n  setOnModelChange(callbackFunction) {\n    this.onModelChange = callbackFunction;\n  }\n  getOnModelTouched() {\n    return this.onModelTouched;\n  }\n  setOnModelTouched(callbackFunction) {\n    this.onModelTouched = callbackFunction;\n  }\n  setValue(value) {\n    this.inputService.value = value;\n  }\n  /**\n   * Passthrough to setTimeout that can be stubbed out in tests.\n   */\n  timer(callback, delayMilliseconds) {\n    setTimeout(callback, delayMilliseconds);\n  }\n}\nclass NgxCurrencyDirective {\n  set currencyMask(value) {\n    if (typeof value === 'string') return;\n    this._options = value;\n  }\n  /**\n   * @deprecated Use currencyMask input instead\n   */\n  set options(value) {\n    this._options = value;\n  }\n  constructor(globalOptions, keyValueDiffers, _elementRef) {\n    this._elementRef = _elementRef;\n    this._options = {};\n    this._optionsTemplate = {\n      align: 'right',\n      allowNegative: true,\n      allowZero: true,\n      decimal: '.',\n      precision: 2,\n      prefix: '$ ',\n      suffix: '',\n      thousands: ',',\n      nullable: false,\n      inputMode: NgxCurrencyInputMode.Financial,\n      ...globalOptions\n    };\n    this._keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n  ngOnInit() {\n    this._inputHandler = new InputHandler(this._elementRef.nativeElement, {\n      ...this._optionsTemplate,\n      ...this._options\n    });\n  }\n  ngAfterViewInit() {\n    this._elementRef.nativeElement.style.textAlign = this._options?.align ?? this._optionsTemplate.align;\n  }\n  ngDoCheck() {\n    if (this._keyValueDiffer.diff(this._options)) {\n      this._elementRef.nativeElement.style.textAlign = this._options?.align ?? this._optionsTemplate.align;\n      this._inputHandler.updateOptions({\n        ...this._optionsTemplate,\n        ...this._options\n      });\n    }\n  }\n  handleBlur(event) {\n    this._inputHandler.getOnModelTouched().apply(event);\n  }\n  handleCut() {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleCut();\n    }\n  }\n  handleInput() {\n    if (this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleInput();\n    }\n  }\n  handleKeydown(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleKeydown(event);\n    }\n  }\n  handleKeypress(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleKeypress(event);\n    }\n  }\n  handlePaste() {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handlePaste();\n    }\n  }\n  handleDrop(event) {\n    if (!this.isChromeAndroid()) {\n      event.preventDefault();\n    }\n  }\n  isChromeAndroid() {\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n  }\n  isReadOnly() {\n    return this._elementRef.nativeElement.hasAttribute('readonly');\n  }\n  registerOnChange(callbackFunction) {\n    this._inputHandler.setOnModelChange(callbackFunction);\n  }\n  registerOnTouched(callbackFunction) {\n    this._inputHandler.setOnModelTouched(callbackFunction);\n  }\n  setDisabledState(isDisabled) {\n    this._elementRef.nativeElement.disabled = isDisabled;\n  }\n  writeValue(value) {\n    this._inputHandler.setValue(value);\n  }\n  static {\n    this.ɵfac = function NgxCurrencyDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxCurrencyDirective)(i0.ɵɵdirectiveInject(NGX_CURRENCY_CONFIG, 8), i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgxCurrencyDirective,\n      selectors: [[\"input\", \"currencyMask\", \"\"]],\n      hostBindings: function NgxCurrencyDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"blur\", function NgxCurrencyDirective_blur_HostBindingHandler($event) {\n            return ctx.handleBlur($event);\n          })(\"cut\", function NgxCurrencyDirective_cut_HostBindingHandler() {\n            return ctx.handleCut();\n          })(\"input\", function NgxCurrencyDirective_input_HostBindingHandler() {\n            return ctx.handleInput();\n          })(\"keydown\", function NgxCurrencyDirective_keydown_HostBindingHandler($event) {\n            return ctx.handleKeydown($event);\n          })(\"keypress\", function NgxCurrencyDirective_keypress_HostBindingHandler($event) {\n            return ctx.handleKeypress($event);\n          })(\"paste\", function NgxCurrencyDirective_paste_HostBindingHandler() {\n            return ctx.handlePaste();\n          })(\"drop\", function NgxCurrencyDirective_drop_HostBindingHandler($event) {\n            return ctx.handleDrop($event);\n          });\n        }\n      },\n      inputs: {\n        currencyMask: \"currencyMask\",\n        options: \"options\"\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgxCurrencyDirective),\n        multi: true\n      }])]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxCurrencyDirective, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: 'input[currencyMask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgxCurrencyDirective),\n        multi: true\n      }]\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [NGX_CURRENCY_CONFIG]\n    }]\n  }, {\n    type: i0.KeyValueDiffers\n  }, {\n    type: i0.ElementRef\n  }], {\n    currencyMask: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    handleBlur: [{\n      type: HostListener,\n      args: ['blur', ['$event']]\n    }],\n    handleCut: [{\n      type: HostListener,\n      args: ['cut']\n    }],\n    handleInput: [{\n      type: HostListener,\n      args: ['input']\n    }],\n    handleKeydown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    handleKeypress: [{\n      type: HostListener,\n      args: ['keypress', ['$event']]\n    }],\n    handlePaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    handleDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\nfunction provideEnvironmentNgxCurrency(config) {\n  return makeEnvironmentProviders([{\n    provide: NGX_CURRENCY_CONFIG,\n    useValue: config\n  }]);\n}\n\n/*\n * Public API Surface of ngx-currency\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_CURRENCY_CONFIG, NgxCurrencyDirective, NgxCurrencyInputMode, provideEnvironmentNgxCurrency };\n"],
  "mappings": "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",
  "names": ["NgxCurrencyInputMode"]
}
